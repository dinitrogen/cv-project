{"version":3,"sources":["components/General.js","components/Education.js","components/Experience.js","components/CVform.js","App.js","reportWebVitals.js","index.js"],"names":["General","props","state","name","address","phone","isSubmitted","handleChange","bind","handleSubmit","handleEditClicked","event","target","value","this","setState","preventDefault","className","onSubmit","type","onChange","onClick","Component","Education","handleDelete","id","Experience","CVform","schoolForms","experienceForms","schoolForm","experienceForm","inPreviewMode","addSchoolForm","addExperienceForm","showPreviewMode","hidePreviewMode","prevID","concat","newSchoolForms","filter","newExperienceForms","document","querySelectorAll","forEach","button","style","display","marginLeft","marginRight","ref","el","componentRef","map","trigger","content","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.83249189.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/subSection.css';\n\nclass General extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            address: '',\n            phone: '',\n            isSubmitted: false,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleEditClicked = this.handleEditClicked.bind(this);\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        \n        this.setState({\n            \n            isSubmitted: true\n        });\n    }\n\n    handleEditClicked() {\n        this.setState({\n            isSubmitted: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                \n                {!this.state.isSubmitted &&\n                <form className=\"editForm\" onSubmit={this.handleSubmit}>\n                    <label>\n                        Name:\n                        <input\n                            name=\"name\"\n                            type=\"text\"\n                            value={this.state.name}\n                            onChange={this.handleChange} />\n                    </label>\n                    <br />\n                    <label>\n                        Address:\n                        <input\n                            name=\"address\"\n                            type=\"text\"\n                            value={this.state.address}\n                            onChange={this.handleChange} />\n                    </label>\n                    <br />\n                    <label>\n                        Phone:\n                        <input\n                            name=\"phone\"\n                            type=\"text\"\n                            value={this.state.phone}\n                            onChange={this.handleChange} />\n                    </label>\n                    <br />\n                    \n                    <input type=\"submit\" value=\"Submit\" />\n                \n                </form>}\n\n                {this.state.isSubmitted &&\n                    <div className=\"subSectionDiv\">{this.state.name}<br/>\n                    {this.state.address}<br/>\n                    {this.state.phone}<br/>\n                    \n                    <button className=\"editButton\" onClick={this.handleEditClicked}>Edit</button>\n                    </div>}\n            </div>\n        );\n    }\n\n}\n\nexport default General;","import React, { Component } from 'react';\nimport '../styles/subSection.css';\n\nclass Education extends Component {\n    constructor(props) {\n        super(props);\n        // console.log(props);\n        this.state = {\n            name: '',\n            address: '',\n            isSubmitted: false,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleEditClicked = this.handleEditClicked.bind(this);\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        \n        this.setState({\n            \n            isSubmitted: true\n        });\n    }\n\n    handleEditClicked() {\n        this.setState({\n            isSubmitted: false\n        });\n    }\n\n    render() {\n\n        return (\n            <div >\n                \n                {!this.state.isSubmitted &&\n                <form className=\"editForm\" onSubmit={this.handleSubmit}>\n                    <label>\n                        Name:\n                        <input\n                            name=\"name\"\n                            type=\"text\"\n                            value={this.state.name}\n                            onChange={this.handleChange} />\n                    </label>\n                    <br />\n                    <label>\n                        Address:\n                        <input\n                            name=\"address\"\n                            type=\"text\"\n                            value={this.state.address}\n                            onChange={this.handleChange} />\n                    </label>\n                    <br />\n                   \n                    <input type=\"submit\" value=\"Submit\" />\n                </form>}\n\n                {this.state.isSubmitted && \n                    <div className=\"subSectionDiv\">Name: {this.state.name}<br/>\n                    Address: {this.state.address}<br/>\n                    \n                    <div>\n                        <button className=\"editButton\" onClick={this.handleEditClicked}>Edit</button>\n                        <button className=\"editButton\" onClick={() => this.props.handleDelete(this.props.type, this.props.id)}>Delete</button>\n                    </div>\n                    </div>}\n            </div>\n        );\n    }\n\n}\n\nexport default Education;","import React, { Component } from 'react';\nimport '../styles/subSection.css';\n\nclass Experience extends Component {\n    constructor(props) {\n        super(props);\n        // console.log(props);\n        this.state = {\n            name: '',\n            address: '',\n            isSubmitted: false,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleEditClicked = this.handleEditClicked.bind(this);\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        \n        this.setState({\n            \n            isSubmitted: true\n        });\n    }\n\n    handleEditClicked() {\n        this.setState({\n            isSubmitted: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                \n                {!this.state.isSubmitted &&\n                <form className=\"editForm\" onSubmit={this.handleSubmit}>\n                    <label>\n                        Name:\n                        <input\n                            name=\"name\"\n                            type=\"text\"\n                            value={this.state.name}\n                            onChange={this.handleChange} />\n                    </label>\n                    <br />\n                    <label>\n                        Address:\n                        <input\n                            name=\"address\"\n                            type=\"text\"\n                            value={this.state.address}\n                            onChange={this.handleChange} />\n                    </label>\n                    <br />\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>}\n\n                {this.state.isSubmitted && \n                    <div className=\"subSectionDiv\">Name: {this.state.name}<br/>\n                    Address: {this.state.address}<br/>\n                    <button className=\"editButton\" onClick={this.handleEditClicked}>Edit</button>\n                    <button className=\"editButton\" onClick={() => this.props.handleDelete(this.props.type, this.props.id)}>Delete</button>\n                    </div>}\n            </div>\n        );\n    }\n\n}\n\nexport default Experience;","import React, { Component } from 'react';\nimport General from './General.js';\nimport Education from './Education.js';\nimport Experience from './Experience.js';\nimport '../styles/CVform.css';\nimport ReactToPrint from 'react-to-print';\n\nclass CVform extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            schoolForms: [],\n            experienceForms: [],\n            schoolForm: {\n                id: 1\n            },\n            experienceForm: {\n                id: 1\n            },\n            inPreviewMode: false\n        }\n    this.addSchoolForm = this.addSchoolForm.bind(this);\n    this.addExperienceForm = this.addExperienceForm.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.showPreviewMode = this.showPreviewMode.bind(this);\n    this.hidePreviewMode = this.hidePreviewMode.bind(this);\n    }\n\n    addSchoolForm(event) {\n        const schoolForms = this.state.schoolForms;\n        let prevID = this.state.schoolForm.id;\n        prevID++;\n        this.setState({\n            schoolForms: schoolForms.concat(<Education \n                                            type=\"education\"\n                                            key={this.state.schoolForm.id} // key is required and may be a \"reserved\" keyword for React\n                                            id={this.state.schoolForm.id}\n                                            handleDelete={this.handleDelete}\n                                             />),\n            schoolForm: {\n                id: prevID\n            }\n        });\n    }\n\n    addExperienceForm(event) {\n        const experienceForms = this.state.experienceForms;\n        let prevID = this.state.experienceForm.id;\n        prevID++;\n        this.setState({\n            experienceForms: experienceForms.concat(<Experience \n                                            type=\"experience\"\n                                            key={this.state.experienceForm.id} // key is required and may be a \"reserved\" keyword for React\n                                            id={this.state.experienceForm.id}\n                                            handleDelete={this.handleDelete}\n                                             />),\n            experienceForm: {\n                id: prevID\n            }\n        });\n    }\n\n    handleDelete(type, id) {\n        // alert('Deleted' + id + type);\n        if (type === 'education') {\n            // console.log(this.state.schoolForms);\n            let newSchoolForms = this.state.schoolForms.filter((schoolForm) => {\n                // console.log(id, schoolForm.key);\n                return schoolForm.props.id !== id;\n            });\n\n            this.setState({\n                schoolForms: newSchoolForms\n            });\n        } else {\n            // console.log(this.state.experienceForms);\n            let newExperienceForms = this.state.experienceForms.filter((experienceForm) => {\n                return experienceForm.props.id !== id;\n            });\n\n            this.setState({\n                experienceForms: newExperienceForms\n            });\n        }\n    }\n\n    showPreviewMode() {\n        this.setState({\n            inPreviewMode: true\n        });\n        document.querySelectorAll('.editButton').forEach(function(button) {\n            button.style.display = 'none';\n        });\n        document.querySelectorAll('.editForm').forEach(function(button) {\n            button.style.display = 'none';\n        });\n    }\n\n    hidePreviewMode() {\n        this.setState({\n            inPreviewMode: false\n        });\n        document.querySelectorAll('.editButton').forEach(function(button) {\n            button.style.display = 'inline';\n            button.style.marginLeft = 'auto';\n            button.style.marginRight = 'auto';\n        });\n        document.querySelectorAll('.editForm').forEach(function(button) {\n            button.style.display = 'block';\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"CVForm\">\n                \n                <div className=\"CVcontainer\" ref={el => (this.componentRef = el)}>\n                    <h2>Personal Info:</h2>\n                    <div className=\"CVFormDiv\">\n                        <General inPreviewMode={this.state.inPreviewMode}/>\n                    </div>\n                    <br />\n                    <h2>Education:</h2>\n                    <button className=\"editButton\" onClick={this.addSchoolForm}>Add School</button>\n                    \n                    <div className=\"CVFormDiv\">\n                        {this.state.schoolForms.map((schoolForm) => {\n                                return schoolForm;\n                            })}\n                    </div>\n                    <br />\n                    <h2>Experience:</h2>\n                    <button className=\"editButton\" onClick={this.addExperienceForm}>Add Experience</button>\n                    \n                    <div className=\"CVFormDiv\">\n                        {this.state.experienceForms.map((experienceForm) => {\n                            return experienceForm;\n                        })}\n                    </div>\n                    <br />\n                    {!this.state.inPreviewMode &&\n                    <button onClick={this.showPreviewMode}>Show preview</button>}\n                </div>\n                    \n\n                {this.state.inPreviewMode &&\n                    <div>\n                        <button onClick={this.hidePreviewMode}>Show edit mode</button>\n                        <br />\n                        \n                        <ReactToPrint\n                            trigger={() => {\n                                return <button className=\"printButton\">Print</button>;\n                            }}\n                            content={() => this.componentRef}\n                        />\n                        \n                    </div>\n                }\n\n            </div>\n        );\n    }\n\n}\n\nexport default CVform;","import './styles/App.css';\nimport CVform from './components/CVform.js';\n\n\nfunction App() {\n  \n   \n    return (\n      <div className=\"App\">\n          \n          <CVform  />\n          \n      </div>\n    );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}